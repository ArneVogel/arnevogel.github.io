<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Welcome</title>
    <link>https://www.arnevogel.com/</link>
    <description>Recent content on Welcome</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Jan 2018 17:33:55 +0100</lastBuildDate>
    
	<atom:link href="https://www.arnevogel.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Theoretical Computer Science Cheat Sheet</title>
      <link>https://www.arnevogel.com/theoretical-computer-science-cheat-sheet/</link>
      <pubDate>Mon, 01 Jan 2018 17:33:55 +0100</pubDate>
      
      <guid>https://www.arnevogel.com/theoretical-computer-science-cheat-sheet/</guid>
      <description>$e^{\pi i} + 1 = 0$
Automata and Formal Languages Formal Languages An alphabet $\Sigma$ is a finite set of symbols. For example $\{0,1\}$ is an alphabet and $\{a,b,c,d\}$ is an alphabet. An word is a finite set of symbols from an alphabet $\Sigma$. One word for the alphabet $\{a,b,c,d\}$ would be $abc$ and another one would be $aaab$. The length of a word $w$ is defined as the number of symbols it has.</description>
    </item>
    
    <item>
      <title>Analyzing Hacker News &#34;Who Is Hiring&#34; Threads</title>
      <link>https://www.arnevogel.com/analyzing-hacker-news-who-is-hiring-threads/</link>
      <pubDate>Sat, 30 Dec 2017 17:54:49 +0100</pubDate>
      
      <guid>https://www.arnevogel.com/analyzing-hacker-news-who-is-hiring-threads/</guid>
      <description>Analyzing 41194 comments and 6367099 words posted in Hacker News &amp;ldquo;Who is Hiring&amp;rdquo; threads. If you don&amp;rsquo;t know what those threads are here is the latest one: Ask HN: Who is hiring? (December 2017)
In these threads companies can self promote their job offerings and in doing to they describe the jobs they are offering.
In this post I show the most interesting things I found while playing around with the data.</description>
    </item>
    
    <item>
      <title>Applying Benfords Law</title>
      <link>https://www.arnevogel.com/applying-benfords-law/</link>
      <pubDate>Thu, 28 Dec 2017 17:07:28 +0100</pubDate>
      
      <guid>https://www.arnevogel.com/applying-benfords-law/</guid>
      <description>If you don&amp;rsquo;t know about Benford&amp;rsquo;s law here is a quick summary:
In numerical data the frequency distribution of the leading digits it not an equal distribution. The lower the digit the more likely it is to appear as leading digit in the data. For example in base 10: Numbers with the initial digit 1 occur about 6.6 times as often as numbers with the initial digit 9.
For more information check out the extensive Wikipedia page about Benford&amp;rsquo;s law.</description>
    </item>
    
    <item>
      <title>Golang Cross Compiling on Ubuntu</title>
      <link>https://www.arnevogel.com/golang-cross-compiling-on-ubuntu/</link>
      <pubDate>Wed, 27 Dec 2017 15:41:07 +0100</pubDate>
      
      <guid>https://www.arnevogel.com/golang-cross-compiling-on-ubuntu/</guid>
      <description>Cross compiling a golang project on Ubuntu is as easy as building the project for ubuntu itself. Golang makes it easy to cross compile for many platforms and architecture types. When you want to cross compile your go project you only have to set the GOOS and GOARCH variables and go will handle the rest.
In your project folder typing go build will build it for the platform and architecture of the computer you currently are on.</description>
    </item>
    
    <item>
      <title>Denoising Functions in Matlab With FFT</title>
      <link>https://www.arnevogel.com/denoising-functions-in-matlab-with-fft/</link>
      <pubDate>Fri, 22 Dec 2017 12:44:59 +0100</pubDate>
      
      <guid>https://www.arnevogel.com/denoising-functions-in-matlab-with-fft/</guid>
      <description>Reducing the noise of a signal in Matlab using fast fourier transform.
You can download the Matlab file: denoise.m
The function generating the signal in this post will be:
% number of signal measurements n = 1000; % measuring from 0 to 2 pi length = 2*pi; % difference between two measurements h = length/n; % steps t = (0:h:length-h); % Signal S = sin(2*t)+cos(7*t)-cos(t);  Plot of the signal from 0 to 2*pi.</description>
    </item>
    
    <item>
      <title>Standalone Concat Version</title>
      <link>https://www.arnevogel.com/standalone-concat-version/</link>
      <pubDate>Wed, 13 Dec 2017 13:21:01 +0100</pubDate>
      
      <guid>https://www.arnevogel.com/standalone-concat-version/</guid>
      <description>For some time I wanted to create a standalone version of Concat without the download restriction I had to pose on the online version because of server limitations.
In a poll I put up some months ago the most asked feature was to increase the download limit. Unfortunately with only 20gb disk space on the server and about 300 people using the downloader every day that is not possible without investing in more disk space.</description>
    </item>
    
    <item>
      <title>Numerical Integration in Matlab</title>
      <link>https://www.arnevogel.com/numerical-integration-in-matlab/</link>
      <pubDate>Sat, 09 Dec 2017 11:32:35 +0100</pubDate>
      
      <guid>https://www.arnevogel.com/numerical-integration-in-matlab/</guid>
      <description> The code for the summed newton cotes formulas in matlab. The functions compute the integral of a function f(x) in the same file from a to b with step size n. Use a sufficient high n for accurate results.
See the example for usage.
x is a vector of equidistant nodes.
Trapezoid rule function t = trapezoid_rule(a,b,n) t = 0; x = linspace(a,b,n); h = x(2)-x(1); for i = 1:length(x)-1 t = t + (h/2 * (f(x(i)) + f(x(i+1)))); end end  Simpson&amp;rsquo;s rule function s = simpson_rule(a,b,n) s = 0; x = linspace(a,b,n); h = x(2)-x(1); for i = 1:length(x)-1 s = s + (f(x(i)) + 4* f((x(i)+x(i+1))/2) + f(x(i+1))); end s = s * h/6; end  3&amp;frasl;8 rule function r = rule38(a,b,n) r = 0; x = linspace(a,b,n); h = x(2)-x(1); for i = 1:length(x)-1 r = r + ( f(x(i)) + 3* f(((x(i) + x(i+1))*(4/3)/3)) + 3* f(((x(i) + x(i+1))*(5/3))/3) + f(x(i+1))); end r = r * h/8; end  </description>
    </item>
    
  </channel>
</rss>